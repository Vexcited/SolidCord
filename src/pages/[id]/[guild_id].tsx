import type { UserStoreReady } from "@/stores/user";
import type { User } from "@/types/discord/user";
import { Component, For, Match, Show, Switch } from "solid-js";

import { createMemo } from "solid-js";
import { userStore } from "@/stores/user";
import { getUserAvatarURL, getChannelIconURL } from "@/utils/api/images";

import { BsPeopleFill } from "solid-icons/bs";
import { OpDispatchReadyPrivateChannelType } from "@/websockets/gateway/types";

import { A, Outlet, useParams } from "@solidjs/router";

const AppHomePage: Component = () => {
  const params = useParams();
  const guild_id = () => params.guild_id;

  const store = () => userStore as UserStoreReady;

  const channels = () => store().private_channels;
  const friends = () => store().relationships;
  const users = () => store().users;

  const getRecipients = (ids: string[]) => {
    return ids.map(id => users().find(user => user.id === id));
  };

  const PrivateChannelEntry: Component<ReturnType<typeof channels>[number]> = (channel) => {
    const recipients = createMemo(() => getRecipients(channel.recipient_ids));

    /**
     * Checks if the channel have an image or not.
     * @returns `null` when no image for the channel could be found.
     */
    const getChannelImageURL = (): string | null => {
      let url: string | null = null;

      switch (channel.type) {
      case OpDispatchReadyPrivateChannelType.DM: {
        const user = recipients()[0];
        if (!user || !user.avatar) break;

        url = getUserAvatarURL(
          user.id,
          user.avatar
        );

        break;
      }

      case OpDispatchReadyPrivateChannelType.Group: {
        if (!channel.icon) break;

        url = getChannelIconURL(
          channel.id,
          channel.icon
        );

        break;
      }
      }

      return url;
    };

    /**
     * If the user is in `relationships`,
     * we should check for `nickname` before
     * using user's username.
     */
    const getUserName = (user: User): string => {
      let name = user.username;

      const userInRelationships = friends().find(
        friend => friend.user_id === user.id
      );

      if (userInRelationships && userInRelationships.nickname) {
        name = userInRelationships.nickname;
      }

      return name;
    };

    const getChannelName = (): string => {
      let name = recipients().map(user => user && getUserName(user))
        .filter(Boolean)
        .sort()
        .join(", ");

      switch (channel.type) {
      case OpDispatchReadyPrivateChannelType.DM: {
        const user = recipients()[0];
        if (!user) break; // Should never happen, though.

        name = getUserName(user);
        break;
      }

      case OpDispatchReadyPrivateChannelType.Group: {
        // When the group channel doesn't have any name,
        // we keep the one generated by default.
        if (!channel.name) break;

        name = channel.name;
        break;
      }
      }

      return name;
    };

    return (
      <A class="flex items-center gap-2" href={`/${store().user.id}/@me/${channel.id}`}>
        <Show when={getChannelImageURL()}
          fallback={
            <div class="h-8 w-8 flex items-center justify-center rounded-full bg-black">
              <Switch>
                <Match when={channel.type === OpDispatchReadyPrivateChannelType.Group}>
                  <BsPeopleFill color="white" />
                </Match>
              </Switch>
            </div>
          }
        >
          {url => (
            <img class="h-8 w-8 rounded-full"
              src={url()}
            />
          )}
        </Show>
        <p class="text-white">
          {getChannelName()}
        </p>
      </A>
    );
  };

  return (
    <div class="h-full flex">
      <div class="h-full w-[240px] flex-shrink-0 rounded-tl-lg bg-[#2b2d31]">
        <nav class="h-full flex flex-col gap-4 overflow-y-auto p-4"
          aria-label="Private channels"
        >
          <For each={channels()}>
            {channel => (
              <div>
                <PrivateChannelEntry {...channel} />
              </div>
            )}
          </For>
        </nav>
      </div>
      <div class="w-full flex flex-col">
        you're in server {guild_id()}
        <Outlet />
      </div>
    </div>
  );
};

export default AppHomePage;

